name: Rust Checks

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  # should add vars that can trigger release
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Checks
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout sources
      uses: actions/checkout@v2
    -
      name: Install nightly toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy
    -
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    -
      name: Run cargo check
      uses: actions-rs/cargo@v1
      with:
        command: check --locked
    -
      name: Run cargo fmt
      uses: actions-rs/cargo@v1
      continue-on-error: true
      with:
        command: fmt
        args: --all -- --check
    -
      name: Run cargo clippy
      uses: actions-rs/cargo@v1
      continue-on-error: true
      with:
        command: clippy
        args: -- -D warnings

  tests:
    name: Test ${{ matrix.channel }}
    needs: check
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        channel:
          - stable
          - nightly
    steps:
    -
      name: Checkout sources
      uses: actions/checkout@v2
    -
      name: Install ${{ matrix.channel }} toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.channel }}
        override: true
    -
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    -
      name: Run cargo test
      uses: actions-rs/cargo@v1
      with:
        command: test --locked
